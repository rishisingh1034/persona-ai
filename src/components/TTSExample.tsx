'use client';\n\nimport { useState } from 'react';\nimport { useTTS } from '@/hooks/useTTS';\n\nexport default function TTSExample() {\n  const [text, setText] = useState('Hello! This is a test message for voice synthesis.');\n  const [persona, setPersona] = useState<'hitesh' | 'piyush'>('hitesh');\n  \n  const { speak, stop, isLoading, isPlaying, error, lastAudioUrl } = useTTS({\n    autoPlay: true,\n    fallbackEnabled: true\n  });\n\n  const handleSpeak = async () => {\n    await speak(text, persona);\n  };\n\n  const handleStop = () => {\n    stop();\n  };\n\n  return (\n    <div className=\"p-6 max-w-2xl mx-auto bg-white rounded-lg shadow-md\">\n      <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">\n        üéµ ElevenLabs TTS Integration\n      </h2>\n      \n      {/* Text Input */}\n      <div className=\"mb-4\">\n        <label htmlFor=\"text\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n          Text to Speak\n        </label>\n        <textarea\n          id=\"text\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          rows={3}\n          maxLength={2500}\n          placeholder=\"Enter text to convert to speech...\"\n        />\n        <div className=\"text-xs text-gray-500 mt-1\">\n          {text.length}/2500 characters\n        </div>\n      </div>\n\n      {/* Persona Selection */}\n      <div className=\"mb-4\">\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          Choose Persona\n        </label>\n        <div className=\"flex space-x-4\">\n          <label className=\"flex items-center\">\n            <input\n              type=\"radio\"\n              value=\"hitesh\"\n              checked={persona === 'hitesh'}\n              onChange={(e) => setPersona(e.target.value as 'hitesh' | 'piyush')}\n              className=\"mr-2\"\n            />\n            Hitesh\n          </label>\n          <label className=\"flex items-center\">\n            <input\n              type=\"radio\"\n              value=\"piyush\"\n              checked={persona === 'piyush'}\n              onChange={(e) => setPersona(e.target.value as 'hitesh' | 'piyush')}\n              className=\"mr-2\"\n            />\n            Piyush\n          </label>\n        </div>\n      </div>\n\n      {/* Control Buttons */}\n      <div className=\"flex space-x-3 mb-4\">\n        <button\n          onClick={handleSpeak}\n          disabled={isLoading || !text.trim()}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center\"\n        >\n          {isLoading ? (\n            <>\n              <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n              </svg>\n              Generating...\n            </>\n          ) : isPlaying ? (\n            'üîä Playing'\n          ) : (\n            'üéµ Speak'\n          )}\n        </button>\n        \n        <button\n          onClick={handleStop}\n          disabled={!isPlaying && !isLoading}\n          className=\"px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 disabled:bg-gray-400 disabled:cursor-not-allowed\"\n        >\n          ‚èπÔ∏è Stop\n        </button>\n      </div>\n\n      {/* Status Display */}\n      <div className=\"mb-4\">\n        <div className=\"text-sm text-gray-600\">\n          <strong>Status:</strong> \n          {isLoading && ' Generating speech...'}\n          {isPlaying && ' Playing audio...'}\n          {!isLoading && !isPlaying && ' Ready'}\n        </div>\n        \n        {lastAudioUrl && (\n          <div className=\"text-sm text-green-600 mt-1\">\n            <strong>Generated Audio:</strong> \n            <a \n              href={lastAudioUrl} \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"underline hover:text-green-800\"\n            >\n              {lastAudioUrl}\n            </a>\n          </div>\n        )}\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded\">\n          <strong>Error:</strong> {error}\n        </div>\n      )}\n\n      {/* Instructions */}\n      <div className=\"text-sm text-gray-600 bg-gray-50 p-3 rounded\">\n        <h3 className=\"font-semibold mb-2\">Instructions:</h3>\n        <ol className=\"list-decimal list-inside space-y-1\">\n          <li>Add your ElevenLabs API key to <code>.env.local</code></li>\n          <li>Configure voice IDs for Hitesh and Piyush personas</li>\n          <li>Enter text and select a persona</li>\n          <li>Click \"Speak\" to generate and play audio</li>\n          <li>If ElevenLabs fails, it will fallback to Web Speech API</li>\n        </ol>\n      </div>\n    </div>\n  );\n}"
